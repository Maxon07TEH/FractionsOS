This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
drivers/
  x64/
    Storage/
      ATA/
        ata.c
        ata.h
      FS/
        fat32.c
        fat32.h
      NVME/
        nvme.c
        nvme.h
    Video/
      vbe/
        vbe.c
        vbe.h
      vga/
        printk.c
        vga.c
        vga.h
kernel/
  x64/
    boot.asm
    main.c
scripts/
  clean.sh
  compile.sh
  deploy-to-github.sh
  make-iso.sh
  run.sh
src/
  boot/
    grub/
      grub.cfg
  images/
    headers/
      A.h
      commandprompt.h
      cursor.h
      placeholder.h
      wallpaper1.h
.gitignore
encode.py
linker.ld
Makefile
manage-structure.sh
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="drivers/x64/Storage/ATA/ata.c">
#include "ata.h"
#include "io.h"
#include "string.h"

static void ata_delay() {
    for(int i = 0; i < 4; i++) inb(ATA_STATUS);
}

void ata_wait_bsy() {
    while(inb(ATA_STATUS) & ATA_STATUS_BSY);
}

void ata_wait_drq() {
    while(!(inb(ATA_STATUS) & ATA_STATUS_DRQ));
}

bool ata_identify(uint8_t drive, ata_identify_t* data) {
    ata_wait_bsy();
    outb(ATA_DRIVE, 0xA0 | (drive << 4));
    outb(ATA_SECTOR_CNT, 0);
    outb(ATA_LBA_LOW, 0);
    outb(ATA_LBA_MID, 0);
    outb(ATA_LBA_HIGH, 0);
    outb(ATA_STATUS, ATA_CMD_IDENTIFY);
    
    if(inb(ATA_STATUS) == 0) return false;
    ata_wait_bsy();
    if(inb(ATA_ERROR) & 0x01) return false;
    
    ata_wait_drq();
    insw(ATA_DATA, data, sizeof(ata_identify_t)/2);
    return true;
}

void ata_read_sectors(uint8_t drive, uint32_t lba, uint8_t count, uint16_t* buffer) {
    ata_wait_bsy();
    outb(ATA_DRIVE, 0xE0 | (drive << 4) | ((lba >> 24) & 0x0F));
    outb(ATA_SECTOR_CNT, count);
    outb(ATA_LBA_LOW, lba & 0xFF);
    outb(ATA_LBA_MID, (lba >> 8) & 0xFF);
    outb(ATA_LBA_HIGH, (lba >> 16) & 0xFF);
    outb(ATA_STATUS, ATA_CMD_READ);
    
    ata_wait_bsy();
    ata_wait_drq();
    
    insw(ATA_DATA, buffer, 256 * count);
}

void ata_write_sectors(uint8_t drive, uint32_t lba, uint8_t count, uint16_t* buffer) {
    ata_wait_bsy();
    outb(ATA_DRIVE, 0xE0 | (drive << 4) | ((lba >> 24) & 0x0F));
    outb(ATA_SECTOR_CNT, count);
    outb(ATA_LBA_LOW, lba & 0xFF);
    outb(ATA_LBA_MID, (lba >> 8) & 0xFF);
    outb(ATA_LBA_HIGH, (lba >> 16) & 0xFF);
    outb(ATA_STATUS, ATA_CMD_WRITE);
    
    ata_wait_bsy();
    ata_wait_drq();
    
    outsw(ATA_DATA, buffer, 256 * count);
    outb(ATA_STATUS, 0xE7);
    ata_wait_bsy();
}

void ata_init() {
    ata_delay();
}
</file>

<file path="drivers/x64/Storage/ATA/ata.h">
#ifndef ATA_H
#define ATA_H

#include <stdint.h>
#include <stdbool.h>

#define ATA_DATA        0x1F0
#define ATA_ERROR       0x1F1
#define ATA_SECTOR_CNT  0x1F2
#define ATA_LBA_LOW     0x1F3
#define ATA_LBA_MID     0x1F4
#define ATA_LBA_HIGH    0x1F5
#define ATA_DRIVE       0x1F6
#define ATA_STATUS      0x1F7

#define ATA_CMD_READ    0x20
#define ATA_CMD_WRITE   0x30
#define ATA_CMD_IDENTIFY 0xEC

#define ATA_STATUS_BSY  0x80
#define ATA_STATUS_DRDY 0x40
#define ATA_STATUS_DRQ  0x08
#define ATA_STATUS_ERR  0x01

typedef struct {
    uint16_t flags;
    uint16_t unused1[9];
    char     serial[20];
    uint16_t unused2[3];
    char     firmware[8];
    char     model[40];
    uint16_t sectors_per_int;
    uint16_t unused3;
    uint16_t capabilities[2];
    uint16_t unused4[2];
    uint16_t valid_ext_data;
    uint16_t unused5[5];
    uint16_t size_of_sector;
    uint16_t total_sectors[4];
} __attribute__((packed)) ata_identify_t;

void ata_wait_bsy();
void ata_wait_drq();
bool ata_identify(uint8_t drive, ata_identify_t* data);
void ata_read_sectors(uint8_t drive, uint32_t lba, uint8_t count, uint16_t* buffer);
void ata_write_sectors(uint8_t drive, uint32_t lba, uint8_t count, uint16_t* buffer);
void ata_init();

#endif
</file>

<file path="drivers/x64/Storage/FS/fat32.c">
#include "fat32.h"
#include "ata.h"
#include "string.h"
#include "memory.h"

static fat32_boot_sector bs;
static uint32_t fat_begin_lba;
static uint32_t data_begin_lba;
static uint32_t sectors_per_cluster;
static uint8_t current_drive;

static uint32_t cluster_to_lba(uint32_t cluster) {
    return data_begin_lba + (cluster - 2) * sectors_per_cluster;
}

bool fat32_init(uint8_t drive) {
    current_drive = drive;
    ata_read_sectors(drive, 0, 1, (uint16_t*)&bs);
    
    if(memcmp(bs.fs_type, "FAT32   ", 8) != 0) return false;
    
    sectors_per_cluster = bs.sectors_per_cluster;
    fat_begin_lba = bs.reserved_sectors;
    data_begin_lba = fat_begin_lba + (bs.fat_count * bs.sectors_per_fat);
    
    return true;
}

bool fat32_open(const char* path, fat32_file* file) {
    uint32_t current_cluster = bs.root_cluster;
    char name[11];
    memset(name, ' ', 11);
    
    // Парсинг пути
    const char* p = path;
    if(*p == '/') p++;
    
    while(*p) {
        // Поиск следующего компонента пути
        const char* end = p;
        while(*end && *end != '/') end++;
        
        // Формирование 8.3 имени
        memset(name, ' ', 11);
        int i = 0;
        while(p < end &&
</file>

<file path="drivers/x64/Storage/FS/fat32.h">
#ifndef FAT32_H
#define FAT32_H

#include <stdint.h>
#include <stdbool.h>

typedef struct {
    uint8_t  jump[3];
    char     oem[8];
    uint16_t bytes_per_sector;
    uint8_t  sectors_per_cluster;
    uint16_t reserved_sectors;
    uint8_t  fat_count;
    uint16_t root_entries;
    uint16_t total_sectors16;
    uint8_t  media_type;
    uint16_t sectors_per_fat16;
    uint16_t sectors_per_track;
    uint16_t head_count;
    uint32_t hidden_sectors;
    uint32_t total_sectors32;
    uint32_t sectors_per_fat;
    uint16_t flags;
    uint16_t version;
    uint32_t root_cluster;
    uint16_t fs_info_sector;
    uint16_t backup_boot_sector;
    uint8_t  reserved[12];
    uint8_t  drive_number;
    uint8_t  nt_flags;
    uint8_t  signature;
    uint32_t volume_id;
    char     volume_label[11];
    char     fs_type[8];
} __attribute__((packed)) fat32_boot_sector;

typedef struct {
    char     name[11];
    uint8_t  attr;
    uint8_t  nt_reserved;
    uint8_t  creation_time_tenth;
    uint16_t creation_time;
    uint16_t creation_date;
    uint16_t last_access_date;
    uint16_t cluster_high;
    uint16_t modified_time;
    uint16_t modified_date;
    uint16_t cluster_low;
    uint32_t file_size;
} __attribute__((packed)) fat32_dir_entry;

typedef struct {
    uint32_t cluster;
    uint32_t size;
    uint32_t position;
    uint32_t current_cluster;
    uint32_t current_sector;
    uint32_t sector_offset;
} fat32_file;

bool fat32_init(uint8_t drive);
bool fat32_open(const char* path, fat32_file* file);
bool fat32_read(fat32_file* file, void* buffer, uint32_t size);
bool fat32_close(fat32_file* file);

#endif
</file>

<file path="drivers/x64/Storage/NVME/nvme.c">
#include "nvme.h"
#include "pci.h"
#include "mmio.h"
#include "memory.h"

#define NVME_REG_CAP 0x00
#define NVME_REG_VS 0x08
#define NVME_REG_INTMS 0x0C
#define NVME_REG_SQ0TDBL 0x1000

static uint32_t* nvme_regs;
static uint64_t admin_queue_phys;
static nvme_command* admin_sq;
static nvme_completion* admin_cq;

void nvme_init() {
    // Поиск NVMe контроллера через PCI
    pci_device_t dev = pci_find_class(0x010802);
    if(dev.vendor_id == 0xFFFF) return;
    
    // Включение MMIO
    nvme_regs = (uint32_t*)pci_map_bar(dev, 0);
    
    // Инициализация админских очередей
    admin_sq = (nvme_command*)AllocateAligned(4096, 4096);
    admin_cq = (nvme_completion*)AllocateAligned(4096, 4096);
    admin_queue_phys = (uint64_t)VirtualToPhysical(admin_sq);
    
    // Настройка регистров контроллера
    mmio_write32(nvme_regs + NVME_REG_SQ0TDBL, 0);
    // ... полная инициализация ...
}

bool nvme_read(uint64_t lba, uint32_t count, void* buffer) {
    nvme_command cmd = {
        .prp1 = (uint64_t)buffer,
        .cmd_specific = {count, (uint32_t)lba, (uint32_t)(lba >> 32)}
    };
    
    // Добавление команды в очередь
    admin_sq[0] = cmd;
    mmio_write32(nvme_regs + NVME_REG_SQ0TDBL, 1);
    
    // Ожидание завершения
    while(admin_cq[0].status == 0xFFFF);
    return (admin_cq[0].status & 0x1) == 0;
}
</file>

<file path="drivers/x64/Storage/NVME/nvme.h">
#ifndef NVME_H
#define NVME_H

#include <stdint.h>

typedef struct {
    uint64_t prp1;
    uint64_t prp2;
    uint32_t cmd_specific[2];
} nvme_command;

typedef struct {
    uint32_t result;
    uint32_t rsvd;
    uint16_t sq_head;
    uint16_t sq_id;
    uint16_t cid;
    uint16_t status;
} nvme_completion;

typedef struct {
    uint32_t vid;
    uint32_t ssvid;
    char     serial[20];
    char     model[40];
    uint64_t max_data_transfer;
    uint32_t controller_id;
    // ... другие поля ...
} nvme_controller_info;

void nvme_init();
bool nvme_identify(nvme_controller_info* info);
bool nvme_read(uint64_t lba, uint32_t count, void* buffer);
bool nvme_write(uint64_t lba, uint32_t count, void* buffer);

#endif
</file>

<file path="drivers/x64/Video/vga/printk.c">
#include "vga.h"
#include <stdarg.h>

void printk(const char *fmt, ...) {
    va_list args;
    va_start(args, fmt);
    
    char buffer[256];
    // Упрощённая реализация форматирования (без поддержки %d, %x и т.д.)
    int i = 0;
    while (*fmt && i < 255) {
        if (*fmt == '%') {
            fmt++;
            if (*fmt == 's') {
                const char *str = va_arg(args, const char *);
                while (*str) buffer[i++] = *str++;
            }
            fmt++;
        } else {
            buffer[i++] = *fmt++;
        }
    }
    buffer[i] = '\0';
    
    vga_write_string(buffer); // Исправлено на vga_write_string()
    
    va_end(args);
}
</file>

<file path="drivers/x64/Video/vga/vga.c">
#include "vga.h"

static uint16_t* vga_buffer = (uint16_t*)0xB8000;
static size_t vga_row = 0;
static size_t vga_column = 0;
static uint8_t vga_color = 0;

void vga_set_color(uint8_t fg, uint8_t bg) {
    vga_color = fg | (bg << 4);
}

void vga_init(void) {
    vga_set_color(COLOR_LIGHT_GREY, COLOR_BLACK);
    for(size_t y = 0; y < VGA_HEIGHT; y++) {
        for(size_t x = 0; x < VGA_WIDTH; x++) {
            const size_t index = y * VGA_WIDTH + x;
            vga_buffer[index] = (vga_color << 8) | ' ';
        }
    }
}

void vga_write_string(const char* data) {
    while(*data != '\0') {
        if(*data == '\n') {
            vga_column = 0;
            vga_row++;
            data++;
            continue;
        }

        if(vga_column >= VGA_WIDTH) {
            vga_column = 0;
            vga_row++;
        }

        const size_t index = vga_row * VGA_WIDTH + vga_column;
        vga_buffer[index] = (vga_color << 8) | *data;

        vga_column++;
        data++;
    }
}
</file>

<file path="drivers/x64/Video/vga/vga.h">
#ifndef VGA_H
#define VGA_H
#include <stdint.h>
#include <stddef.h>

#define VGA_WIDTH 80
#define VGA_HEIGHT 25

enum vga_color {
    COLOR_BLACK = 0,
    COLOR_BLUE = 1,
    COLOR_GREEN = 2,
    COLOR_CYAN = 3,
    COLOR_RED = 4,
    COLOR_MAGENTA = 5,
    COLOR_BROWN = 6,
    COLOR_LIGHT_GREY = 7,
    COLOR_DARK_GREY = 8,
    COLOR_LIGHT_BLUE = 9,
    COLOR_LIGHT_GREEN = 10,
    COLOR_LIGHT_CYAN = 11,
    COLOR_LIGHT_RED = 12,
    COLOR_LIGHT_MAGENTA = 13,
    COLOR_YELLOW = 14,
    COLOR_WHITE = 15,
};

void vga_init(void);
void vga_write_string(const char* data);
void vga_set_color(uint8_t fg, uint8_t bg);

#endif
</file>

<file path="scripts/clean.sh">
#!/bin/bash

rm -rf isodir
rm -f *.bin *.iso
rm -f kernel/x64/*.o drivers/*.o
</file>

<file path="scripts/deploy-to-github.sh">
#!/bin/bash

# Инициализация репозитория
if [ ! -d ".git" ]; then
    git init
    echo "# FractionsOS" > README.md
    git remote add origin git@github.com:YOUR-USERNAME/FractionsOS.git
fi

# Добавление файлов новой структуры
git add .
git commit -m "Project restructured: build system, src folder, scripts"

# Принудительный пуш (замените main на вашу ветку)
git branch -M main
git push -f -u origin main

echo "Project structure updated and pushed to GitHub!"
</file>

<file path="src/boot/grub/grub.cfg">
set timeout=15
set default=0

menuentry "FractionsOS" {
    multiboot2 /boot/FractionsOS.x64.bin
    boot
}
</file>

<file path="src/images/headers/A.h">
#ifndef A_H
#define A_H

#include <stdint.h>

#define A_WIDTH 12
#define A_HEIGHT 12

static const uint64_t A[] = {
    0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 
    0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 
    0xFF000000, 0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 0xFF000000, 
    0xFF000000, 0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 0xFF000000, 
    0xFF000000, 0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 0xFF000000, 
    0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 
    0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 
    0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 
    0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 
    0xFF000000, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFF000000, 
    0xFF000000, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFF000000, 
    0xFF000000, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFF000000, 
};

#endif
</file>

<file path="src/images/headers/cursor.h">
#ifndef CURSOR_H
#define CURSOR_H

#include <stdint.h>

#define CURSOR_WIDTH 16
#define CURSOR_HEIGHT 24

static const uint64_t cursor[] = {
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0xFF000000, 0xFF000000, 0xFF000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0x00000000, 0x00000000, 
    0x00000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0xFF000000, 0xFF000000, 0xFF000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0x00000000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xFF000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0x00000000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xFF000000, 0xFF000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
};

#endif
</file>

<file path="src/images/headers/placeholder.h">
#ifndef PLACEHOLDER_H
#define PLACEHOLDER_H

#include <stdint.h>

#define PLACEHOLDER_WIDTH 12
#define PLACEHOLDER_HEIGHT 12

static const uint64_t placeholder[] = {
    0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 
    0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 
    0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 
    0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 
    0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 
    0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 
    0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 
    0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 
    0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 
    0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 
    0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 
    0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 0xFF000000, 0xFF57138C, 
};

#endif
</file>

<file path="scripts/make-iso.sh">
#!/bin/bash

mkdir -p isodir/boot/grub
cp build/bin/FractionsOS.x64.bin isodir/boot/
cp src/boot/grub/grub.cfg isodir/boot/grub/
grub-mkrescue -o build/iso/FractionsOS.iso isodir
</file>

<file path="src/images/headers/commandprompt.h">
#ifndef COMMANDPROMPT_H
#define COMMANDPROMPT_H

#include <stdint.h>

#define COMMANDPROMPT_WIDTH 200
#define COMMANDPROMPT_HEIGHT 200

static const uint64_t commandprompt[] = {
//в реали тут битмап изображения
};

#endif
</file>

<file path="src/images/headers/wallpaper1.h">
#ifndef WALLPAPER1_H
#define WALLPAPER1_H

#include <stdint.h>

#define WALLPAPER1_WIDTH 1366
#define WALLPAPER1_HEIGHT 768

static const uint64_t wallpaper1[] = {
    /*
    в реали тут находится битмап изображения
    */
}
#endif
</file>

<file path="encode.py">
from PIL import Image
import os
import glob

# Директории входа и выхода
INPUT_DIR = "src/images/bmp"
OUTPUT_DIR = "src/images/headers"

# Убедимся, что директория для хедеров существует
os.makedirs(OUTPUT_DIR, exist_ok=True)

def convert_image_to_bitmap(image_path):
    img = Image.open(image_path).convert("RGBA")
    width, height = img.size
    pixels = list(img.getdata())

    # Имя файла без расширения
    filename = os.path.splitext(os.path.basename(image_path))[0]
    header_filename = os.path.join(OUTPUT_DIR, f"{filename}.h")

    # Создаём заголовочный файл
    with open(header_filename, "w") as f:
        f.write(f"#ifndef {filename.upper()}_H\n")
        f.write(f"#define {filename.upper()}_H\n\n")
        f.write("#include <stdint.h>\n\n")
        f.write(f"#define {filename.upper()}_WIDTH {width}\n")
        f.write(f"#define {filename.upper()}_HEIGHT {height}\n\n")
        f.write(f"static const uint64_t {filename}[] = {{\n")

        for y in range(height):
            f.write("    ")
            for x in range(width):
                r, g, b, a = pixels[y * width + x]
                color = (a << 24) | (r << 16) | (g << 8) | b  # ARGB
                f.write(f"0x{color:08X}, ")
            f.write("\n")

        f.write("};\n\n")
        f.write("#endif\n")

    print(f"[OK] {header_filename} ({width}x{height})")

# Находим все файлы .bmp, .png, .jpg
image_files = glob.glob(os.path.join(INPUT_DIR, "*.bmp")) + \
              glob.glob(os.path.join(INPUT_DIR, "*.png")) + \
              glob.glob(os.path.join(INPUT_DIR, "*.jpg"))

if not image_files:
    print("[WARN] Нет изображений для обработки в", INPUT_DIR)
else:
    for img in image_files:
        convert_image_to_bitmap(img)
</file>

<file path="manage-structure.sh">
#!/bin/bash

# Обновляем main.c
cat > src/kernel/x64/main.c << 'EOF'
#include "../../drivers/x64/Video/vbe/vbe.h"
#include <stdint.h>

struct multiboot_tag_framebuffer {
    uint32_t type;
    uint32_t size;
    uint64_t framebuffer_addr;
    uint32_t framebuffer_width;
    uint32_t framebuffer_height;
    uint32_t framebuffer_pitch;
    uint8_t framebuffer_bpp;
} __attribute__((packed));

// ... остальная часть кода ...

vbe_init_from_multiboot(
    fb_tag->framebuffer_width,
    fb_tag->framebuffer_height,
    fb_tag->framebuffer_bpp,
    fb_tag->framebuffer_pitch,
    (void*)(uintptr_t)fb_tag->framebuffer_addr
);
EOF

# Пересобираем проект
make clean && make all && make iso && make run
</file>

<file path="scripts/run.sh">
#!/bin/bash

qemu-system-x86_64 -cdrom build/iso/FractionsOS.iso \
  -m 2G \
  -serial stdio \
  -d int,cpu_reset \
  -D qemu.log
</file>

<file path=".gitignore">
# Игнорируем все промежуточные файлы сборки
build/
*.o
*.bin
*.elf
*.iso
*.img

# Игнорируем временные файлы редакторов
*.swp
*.swo
*~
.*.swp
.*.swo

# Игнорируем логи и отладочные файлы
*.log
qemu.log

# Игнорируем сгенерированные файлы
*.iso
*.img
*.

# Игнорируем папки, созданные IDE или редакторами
.vscode/
.idea/
*.project
*.settings/
*.cache/
*.DS_Store

# Игнорируем локальные конфигурации
.env
*.local

# Игнорируем исполняемые файлы (если есть)
FractionsOS
FractionsOS.*
qemu.log
*.xml
</file>

<file path="linker.ld">
ENTRY(_start)

SECTIONS {
    . = 1M;
    .text : ALIGN(4K) {
        *(.multiboot_header)
        *(.text)
    }
    .rodata : ALIGN(4K) { *(.rodata) }
    .data : ALIGN(4K) { *(.data) }
    .bss : ALIGN(4K) {
        *(COMMON)
        *(.bss)
        stack_bottom = .;
        . += 16K;
        stack_top = .;
    }
    /DISCARD/ : { *(.note*) }
}
</file>

<file path="Makefile">
ARCH ?= x64
TARGET = FractionsOS.$(ARCH).bin
ISO = FractionsOS.iso

.PHONY: all clean iso run

all:
	@/home/crythicalmethod/DEV/FractionsOS/PyEnv/bin/activate
	python encode.py
	@./scripts/compile.sh -$(ARCH)
	@/home/crythicalmethod/DEV/FractionsOS/PyEnv/bin/activate deactivate
iso:
	@./scripts/make-iso.sh

run:
	@./scripts/run.sh $(ARCH)

clean:
	@./scripts/clean.sh
</file>

<file path="drivers/x64/Video/vbe/vbe.h">
#ifndef VBE_H
#define VBE_H

#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#define VBE_DISPI_IOPORT_INDEX 0x01CE
#define VBE_DISPI_IOPORT_DATA 0x01CF
#define VBE_DISPI_INDEX_ENABLE 0x4
#define VBE_DISPI_INDEX_XRES 0x1
#define VBE_DISPI_INDEX_YRES 0x2
#define VBE_DISPI_INDEX_BPP 0x3

#define ARGB(a, r, g, b) ((a << 24) | (r << 16) | (g << 8) | b)
#define RGB(r, g, b) ARGB(0xFF, r, g, b)

typedef struct {
    uint32_t width;
    uint32_t height;
    uint32_t bpp;
    uint32_t pitch;
    uint32_t* framebuffer;
    uint32_t* backbuffer;
    uint32_t* font_bitmap;
    uint32_t font_width;
    uint32_t font_height;
} vbe_mode_info_t;

void vbe_init(uint32_t width, uint32_t height, uint8_t bpp);
void vbe_swap_buffers();
void vbe_draw_pixel(uint32_t x, uint32_t y, uint32_t color);
void vbe_draw_bitmap(uint32_t x, uint32_t y, uint32_t width, uint32_t height, const uint32_t* bitmap);
void vbe_draw_char(char c, uint32_t x, uint32_t y, uint32_t fg, uint32_t bg);
void vbe_draw_string(const char* str, uint32_t x, uint32_t y, uint32_t fg, uint32_t bg);
void vbe_clear(uint32_t color);
void vbe_scroll(uint32_t lines);
void vbe_set_font(uint32_t* bitmap, uint32_t width, uint32_t height);

extern vbe_mode_info_t vbe_mode_info;

#endif
</file>

<file path="scripts/compile.sh">
#!/bin/bash

ARCH=${1#-}
OBJ_DIR="build/obj"
BIN_DIR="build/bin"

mkdir -p kernel/$ARCH/$OBJ_DIR $OBJ_DIR $BIN_DIR

nasm -f elf32 -g -F dwarf -o kernel/$ARCH/$OBJ_DIR/boot.o kernel/$ARCH/boot.asm || exit 1
gcc -m32 -ffreestanding -fno-pie -fno-stack-protector -I./drivers -O2 -Wall -Wextra -c kernel/$ARCH/main.c -o kernel/$ARCH/$OBJ_DIR/main.o || exit 1
gcc -m32 -ffreestanding -fno-pie -fno-stack-protector -O2 -c drivers/$ARCH/Video/vga/vga.c -o $OBJ_DIR/vga.o || exit 1
gcc -m32 -ffreestanding -fno-pie -fno-stack-protector -O2 -c drivers/$ARCH/Video/vbe/vbe.c -o $OBJ_DIR/vbe.o || exit 1

# Линковка с добавлением стандартной библиотеки
ld -m elf_i386 -T linker.ld -o $BIN_DIR/FractionsOS.$ARCH.bin \
    kernel/$ARCH/$OBJ_DIR/boot.o \
    kernel/$ARCH/$OBJ_DIR/main.o \
    $OBJ_DIR/vga.o \
    $OBJ_DIR/vbe.o || exit 1
</file>

<file path="kernel/x64/boot.asm">
bits 32
section .multiboot_header
align 8

header_start:
    dd 0xe85250d6              
    dd 0                       
    dd header_end - header_start 
    dd 0x100000000 - (0xe85250d6 + 0 + (header_end - header_start)) ; Контрольная сумма

    ; Тег фреймбуфера (тип 5)
    dw 5               
    dw 0                
    dd 32                
    dd 0                
    dd 0                  
    dd 1366               
    dd 768               
    dd 5464               
    db 32                
    db 1                  
    dw 0                
    align 8

    ; Конечный тег
    dw 0
    dw 0
    dd 8
header_end:


section .text
global _start
extern kernel_main

_start:
    mov esp, stack_top

    push ebx      
    push eax       
    call kernel_main
    add esp, 8    

    cli
hang:
    hlt
    jmp hang

section .bss
align 16
stack_bottom:
    resb 16384
stack_top:
</file>

<file path="drivers/x64/Video/vbe/vbe.c">
#include "vbe.h"
#include "io.h"
#include "string.h"
#include "memory.h"

vbe_mode_info_t vbe_mode_info;

static const uint8_t default_font[256][16] = {
    /* 0x00 */ {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
    /* 0x01 */ {0x00,0x00,0x7E,0x81,0xA5,0x81,0x81,0xBD,0x99,0x81,0x81,0x7E,0x00,0x00,0x00,0x00},
    /* ... Полный набор символов VGA 8x16 ... */
};

static void vbe_write(uint16_t index, uint16_t value) {
    outw(VBE_DISPI_IOPORT_INDEX, index);
    outw(VBE_DISPI_IOPORT_DATA, value);
}

void vbe_init(uint32_t width, uint32_t height, uint8_t bpp) {
    vbe_write(VBE_DISPI_INDEX_ENABLE, 0);
    vbe_write(VBE_DISPI_INDEX_XRES, width);
    vbe_write(VBE_DISPI_INDEX_YRES, height);
    vbe_write(VBE_DISPI_INDEX_BPP, bpp);
    vbe_write(VBE_DISPI_INDEX_ENABLE, 0x41);

    vbe_mode_info.width = width;
    vbe_mode_info.height = height;
    vbe_mode_info.bpp = bpp;
    vbe_mode_info.pitch = width * 4;
    vbe_mode_info.framebuffer = (uint32_t*)0xE0000000;
    vbe_mode_info.backbuffer = (uint32_t*)AllocateMemory(width * height * 4);
    vbe_mode_info.font_bitmap = (uint32_t*)default_font;
    vbe_mode_info.font_width = 8;
    vbe_mode_info.font_height = 16;
    
    memset(vbe_mode_info.backbuffer, 0, width * height * 4);
}

void vbe_swap_buffers() {
    memcpy(vbe_mode_info.framebuffer, vbe_mode_info.backbuffer, 
          vbe_mode_info.width * vbe_mode_info.height * 4);
}

void vbe_draw_pixel(uint32_t x, uint32_t y, uint32_t color) {
    if(x >= vbe_mode_info.width || y >= vbe_mode_info.height) return;
    
    uint8_t alpha = (color >> 24) & 0xFF;
    uint32_t bg = vbe_mode_info.backbuffer[y * vbe_mode_info.width + x];
    
    if(alpha == 0xFF) {
        vbe_mode_info.backbuffer[y * vbe_mode_info.width + x] = color;
    } else if(alpha > 0) {
        uint8_t r = ((color >> 16) & 0xFF);
        uint8_t g = ((color >> 8) & 0xFF);
        uint8_t b = (color & 0xFF);
        
        uint8_t bg_r = (bg >> 16) & 0xFF;
        uint8_t bg_g = (bg >> 8) & 0xFF;
        uint8_t bg_b = bg & 0xFF;
        
        r = (r * alpha + bg_r * (255 - alpha)) / 255;
        g = (g * alpha + bg_g * (255 - alpha)) / 255;
        b = (b * alpha + bg_b * (255 - alpha)) / 255;
        
        vbe_mode_info.backbuffer[y * vbe_mode_info.width + x] = RGB(r, g, b);
    }
}

void vbe_draw_bitmap(uint32_t x, uint32_t y, uint32_t width, uint32_t height, const uint32_t* bitmap) {
    for(uint32_t j = 0; j < height; j++) {
        for(uint32_t i = 0; i < width; i++) {
            uint32_t px = x + i;
            uint32_t py = y + j;
            if(px < vbe_mode_info.width && py < vbe_mode_info.height) {
                vbe_draw_pixel(px, py, bitmap[j * width + i]);
            }
        }
    }
}

void vbe_draw_char(char c, uint32_t x, uint32_t y, uint32_t fg, uint32_t bg) {
    const uint8_t* font = &default_font[(uint8_t)c][0];
    for(uint32_t j = 0; j < vbe_mode_info.font_height; j++) {
        for(uint32_t i = 0; i < vbe_mode_info.font_width; i++) {
            uint32_t color = (font[j] & (1 << (7 - i))) ? fg : bg;
            vbe_draw_pixel(x + i, y + j, color);
        }
    }
}

void vbe_draw_string(const char* str, uint32_t x, uint32_t y, uint32_t fg, uint32_t bg) {
    uint32_t cursor_x = x;
    uint32_t cursor_y = y;
    
    while(*str) {
        if(*str == '\n') {
            cursor_x = x;
            cursor_y += vbe_mode_info.font_height;
            str++;
            continue;
        }
        
        vbe_draw_char(*str, cursor_x, cursor_y, fg, bg);
        cursor_x += vbe_mode_info.font_width;
        str++;
    }
}

void vbe_clear(uint32_t color) {
    for(uint32_t i = 0; i < vbe_mode_info.width * vbe_mode_info.height; i++) {
        vbe_mode_info.backbuffer[i] = color;
    }
}

void vbe_scroll(uint32_t lines) {
    uint32_t line_size = vbe_mode_info.width * 4;
    uint32_t scroll_pixels = lines * vbe_mode_info.font_height;
    
    if(scroll_pixels >= vbe_mode_info.height) {
        vbe_clear(0);
        return;
    }
    
    memmove(vbe_mode_info.backbuffer, 
           vbe_mode_info.backbuffer + scroll_pixels * vbe_mode_info.width,
           (vbe_mode_info.height - scroll_pixels) * line_size);
    
    memset(vbe_mode_info.backbuffer + (vbe_mode_info.height - scroll_pixels) * vbe_mode_info.width,
          0, scroll_pixels * line_size);
}

void vbe_set_font(uint32_t* bitmap, uint32_t width, uint32_t height) {
    vbe_mode_info.font_bitmap = bitmap;
    vbe_mode_info.font_width = width;
    vbe_mode_info.font_height = height;
}
</file>

<file path="kernel/x64/main.c">
#include "../../drivers/x64/Video/vbe/vbe.h"
#include "../../src/images/headers/wallpaper1.h" // Определяет WALLPAPER1_WIDTH, WALLPAPER1_HEIGHT, wallpaper1
#include <stdint.h>
#include <stddef.h>
#include <stdlib.h>

struct multiboot_tag {
    uint32_t type;
    uint32_t size;
};

struct multiboot_tag_framebuffer {
    uint32_t type;                // 8 (MULTIBOOT_TAG_TYPE_FRAMEBUFFER)
    uint32_t size;
    uint64_t framebuffer_addr;
    uint32_t framebuffer_width;
    uint32_t framebuffer_height;
    uint32_t framebuffer_pitch;
    uint8_t framebuffer_bpp;
    uint8_t framebuffer_type;     // 1 = RGB
    uint16_t reserved;            
} __attribute__((packed));

void kernel_main(uint32_t magic, void *mboot_info_ptr) {
    if (magic != 0x36d76289) {
        // Обработка ошибки
        while (1) { asm volatile("hlt"); }
    }
    
    struct multiboot_tag *tag = (struct multiboot_tag *)((uintptr_t)mboot_info_ptr + 8);
    struct multiboot_tag_framebuffer *fb_tag = NULL;
    while (tag->type != 0) {
        if (tag->type == 8) { // FRAMEBUFFER
            fb_tag = (struct multiboot_tag_framebuffer *)tag;
            if (fb_tag->framebuffer_type == 1) { break; }
        }
        tag = (struct multiboot_tag *)((uintptr_t)tag + ((tag->size + 7) & ~7));
    }
    
    if (!fb_tag) {
        // Обработка ошибки: тег фреймбуфера не найден
        while (1) { asm volatile("hlt"); }
    }
    
    // Инициализация VBE
    vbe_init(
        fb_tag->framebuffer_width,
        fb_tag->framebuffer_height,
        fb_tag->framebuffer_bpp,
        fb_tag->framebuffer_pitch,
        (void*)(uintptr_t)fb_tag->framebuffer_addr
    );
    
    // Создаем 2 слоя
    layer_clear(0); // Очистка первого слоя
    layer_clear(1); // Очистка второго слоя
    
    // Рисуем обои на слое 0
    draw_bitmap(0, 0, 0, WALLPAPER1_WIDTH, WALLPAPER1_HEIGHT, wallpaper1);
    
    // Очищаем слой 1 и рисуем символ 'A' (пример)
    layer_clear(1);
    // Здесь вы можете добавить код для рисования символа 'A' на слое 1, если у вас есть соответствующий bitmap
    // Например, если у вас есть bitmap для 'A', вы можете использовать draw_bitmap для его рисования.

    // Композитим виртуальные слои и выводим итоговое изображение в видеопамять
    composite_layers();
    
    // Ожидание в бесконечном цикле
    while (1) {
        asm volatile("cli; hlt"); // Остановить прерывания и перейти в режим ожидания
    }
}
</file>

</files>
